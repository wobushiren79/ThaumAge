#pragma kernel CSMain

struct PerlinData
{
    float3 position;
    float perlinData;
};

//频率（宽度）
float perlinFrequency;
//振幅(高度) 
float perlinAmplitude;
//循环大小 最好大于512
float perlinSize;
//种子偏移
float2 randomOffset;
//迭代次数（越多地图越复杂）
int perlinIterateNumber;

RWStructuredBuffer<PerlinData> BufferPerlinData;

float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID,uint3 gid:SV_GROUPID,uint index:SV_GROUPINDEX)
{
    int dataIndex = id.x;
    PerlinData itemPerlinData = BufferPerlinData[dataIndex];

    int iterateNumber = 0;
    float curFrequency = perlinFrequency;
    float curAmplitude = perlinAmplitude;
    float finalnoise = 0;
    while(perlinIterateNumber > iterateNumber)
    {
        float x0 = (itemPerlinData.position.x / perlinSize) * curFrequency;
        float z0 = (itemPerlinData.position.z / perlinSize) * curFrequency;

        float noise0 = unity_gradientNoise(float2(x0 + randomOffset.x , z0 + randomOffset.y)) * curAmplitude;

        finalnoise = finalnoise + noise0;
        iterateNumber = iterateNumber + 1;
        curFrequency = curFrequency * 2;
        curAmplitude = curAmplitude / 2;
    }
    itemPerlinData.perlinData = finalnoise;
    BufferPerlinData[dataIndex] = itemPerlinData;
}

