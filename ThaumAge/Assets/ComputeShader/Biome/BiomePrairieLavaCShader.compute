// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel StartCreate

#include "../BiomeBaseCShader.compute"

//根据生态生成数据
int4 HandleBiome(BlockTerrainData blockTerrainData)
{
    bool isOcean = blockTerrainData.isOcean;
	bool isOceanDown = blockTerrainData.isOceanDown;
	float3 blockPos = blockTerrainData.blockPos;
	int blockIndex = blockTerrainData.blockIndex;
	uint terrainHeight = blockTerrainData.terrainHeight;
	bool isCave = blockTerrainData.isCave;
	bool isCaveDown = blockTerrainData.isCaveDown;
	float weightOceanTarget = blockTerrainData.selectedNoise.oceanThreshold;
	float weightOcean = blockTerrainData.weightOcean;
	float weightOceanDown = blockTerrainData.weightOceanDown;

	if (isOcean) 
	{
		//如果又是水 又是洞穴 并且下方也是
		if (isCave)
		{
			return int4(4, 0, 0, 1);
		}
		else if (isCaveDown)
		{
			return int4(4, 0, 0, 1);
		}
		//靠近水区域显示沙子
		if(weightOcean > weightOceanTarget && weightOcean < weightOceanTarget + 0.05f)
		{
			return int4(3, 0, 0, 1);
		}
		return int4(9002, 0, 0, 1);
	}
	if (isCave)
	{
		return int4(0, 0, 0, 1);
	}
	int4 targetBlockData = int4(0, 0, 0, 0);
	//如果大于地面高度
	if (blockPos.y > terrainHeight)
	{
		//如果是地面上一格
	    if (blockPos.y == terrainHeight + 1)
		{		
			if (!isCaveDown && !isOceanDown)
			{
				//是否生成元素花
				bool isCreateElementFlower = GenerateRandom(seed, blockPos.x / 5, blockPos.z / 5) > 0.997;
				if(isCreateElementFlower)
				{
					targetBlockData = int4(3124, 0, 0, 1);
					return targetBlockData;
				}
								
				//是否生成枯木
				bool isCreateDeadWood = GenerateRandom(seed, blockPos.x / 3, blockPos.z / 3) > 0.99;
				if(isCreateDeadWood)
				{
					targetBlockData = int4(3301, 1001, 0, 1);
					return targetBlockData;
				}
			}			
		}
		else
		{
			targetBlockData = int4(0, 0, 0, 1);
		}
	}
	else if (blockPos.y <= terrainHeight && blockPos.y > terrainHeight - 8)
	{
		//使用沙子
		targetBlockData = int4(7, 0, 0, 1);
	}
	else if (blockPos.y <= terrainHeight - 8 && blockPos.y >= terrainHeight - 16)
	{
		//使用泥土
		targetBlockData = int4(4, 0, 0, 1);
	}
	else
	{
		//使用石头
		targetBlockData = int4(5, 0, 0, 1);
	}
	return targetBlockData;
}

//开始生成数据
[numthreads(8, 8, 8)]
void StartCreate(uint3 id : SV_DispatchThreadID)
{
	BlockTerrainData blockTerrainData = CreateBaseData(id);
	//如果XZ大于W 则不处理
	if (blockTerrainData.validState == 0)
		return;
	//获取生态方块数据
	int4 biomeBlockData = int4(0, 0, 0, 0);
	biomeBlockData = HandleBiome(blockTerrainData);

	SetBlockData(blockTerrainData, biomeBlockData);
}