// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel StartCreate

#include "../BiomeBaseCShader.compute"

int4 HandleBiome(BlockTerrainData blockTerrainData)
{
    bool isOcean = blockTerrainData.isOcean;
	bool isOceanDown = blockTerrainData.isOceanDown;
	float3 blockPos = blockTerrainData.blockPos;
	int blockIndex = blockTerrainData.blockIndex;
	uint terrainHeight = blockTerrainData.terrainHeight;
	bool isCave = blockTerrainData.isCave;
	bool isCaveDown = blockTerrainData.isCaveDown;
	float weightOceanTarget = blockTerrainData.selectedNoise.oceanThreshold;
	float weightOcean = blockTerrainData.weightOcean;
	float weightOceanDown = blockTerrainData.weightOceanDown;

	int4 targetBlockData = int4(0, 0, 0, 0);
	if(blockPos.x > 128 || blockPos.x < -128 || blockPos.z > 128 || blockPos.z < -128)
	{
		if(blockPos.y < 64)
		{
			targetBlockData = int4(4, 0, 0, 1);
			return targetBlockData;
		}
	}
	//如果大于地面高度
	if (blockPos.y > terrainHeight)
	{
		//如果是地面上一格
	    if (blockPos.y == terrainHeight + 1)
		{
			if (blockPos.x < 5 && blockPos.x > -5 && blockPos.z < 5 &&  blockPos.z > -5 )
			{
				targetBlockData = int4(0, 0, 0, 1);
			}
			else
			{
				//是否生成草
				bool isCreateWeedWild = GenerateRandom(seed, blockPos.x / 3, blockPos.z / 3) > 0.8;
				if (isCreateWeedWild)
				{
					float randomType = GenerateRandom(seed, blockPos.x / 13, blockPos.z / 13);
					if (randomType > 0 && randomType <= 0.25)
					{
						targetBlockData = int4(3001, 0, 0, 1);
					}
					else if (randomType > 0.25 && randomType <= 0.5)
					{
						targetBlockData = int4(3002, 0, 0, 1);
					}
					else if (randomType > 0.5 && randomType <= 0.75)
					{
						targetBlockData = int4(3003, 0, 0, 1);
					}
					else 
					{
						targetBlockData = int4(3004, 0, 0, 1);
					}
					return targetBlockData;
				}

				//是否成成花
				bool isCreateFlower = GenerateRandom(seed, blockPos.x / 4, blockPos.z / 4) > 0.99;
				if (isCreateFlower)
				{
					float randomType = GenerateRandom(seed, blockPos.x / 11, blockPos.z / 11);
					if (randomType > 0 && randomType <= 0.33)
					{
						targetBlockData = int4(3111, 0, 0, 1);
					}
					else if (randomType > 0.33 && randomType <= 0.66)
					{
						targetBlockData = int4(3112, 0, 0, 1);
					}
					else
					{
						targetBlockData = int4(3113, 0, 0, 1);
					}
					return targetBlockData;
				}

				//是否生成树
				bool isCreateTree = GenerateRandom(seed, blockPos.x, blockPos.z) > 0.985;
				if (isCreateTree)
				{
					targetBlockData = int4(1001, 1, 0, 1);
					return targetBlockData;
				}

				//是否生成台石
				bool isCreateStoneMoss = GenerateRandom(seed, blockPos.x / 2, blockPos.z / 2) > 0.995;
				if(isCreateStoneMoss)
				{
					targetBlockData = int4(6, 0, 0, 1);
					return targetBlockData;
				}

				targetBlockData = int4(0, 0, 0, 1);
				return targetBlockData;
			}

		}
		else
		{
			targetBlockData = int4(0, 0, 0, 1);
		}
	}
	else if (blockPos.y == terrainHeight)
	{
		//使用泥土
		targetBlockData = int4(101, 0, 0, 1);
	}
	else
	{
		//使用石头
		targetBlockData = int4(5, 0, 0, 1);
	}
	return targetBlockData;
}

//开始生成数据
[numthreads(8, 8, 8)]
void StartCreate(uint3 id : SV_DispatchThreadID)
{
	BlockTerrainData blockTerrainData = CreateBaseData(id);
	//如果XZ大于W 则不处理
	if (blockTerrainData.validState == 0)
		return;
	//获取生态方块数据
	int4 biomeBlockData = int4(0, 0, 0, 0);
	biomeBlockData = HandleBiome(blockTerrainData);

	SetBlockData(blockTerrainData, biomeBlockData);
}