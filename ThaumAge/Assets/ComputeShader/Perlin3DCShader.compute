#pragma kernel CSMain

struct PerlinData
{
    float3 position;
    float perlinData;
};

float perlinOffset;
float perlinScale;

RWStructuredBuffer<PerlinData> BufferPerlinData;

float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID,uint3 gid:SV_GROUPID,uint index:SV_GROUPINDEX)
{
    //int dataIndex = gid.x * 32 + index;
    int dataIndex = id.x;
    PerlinData itemPerlinData = BufferPerlinData[dataIndex];
    float tempX = (itemPerlinData.position.x/256*20 + perlinOffset) * perlinScale;
    float tempY = (itemPerlinData.position.y/256*20 + perlinOffset) * perlinScale;
    float tempZ = (itemPerlinData.position.z/256*20 + perlinOffset) * perlinScale;

    float XY = unity_gradientNoise(float2(tempX,tempY));
    float XZ = unity_gradientNoise(float2(tempX,tempZ));

    float YZ = unity_gradientNoise(float2(tempY,tempZ));
    float YX = unity_gradientNoise(float2(tempY,tempX));

    float ZX = unity_gradientNoise(float2(tempZ,tempX));
    float ZY = unity_gradientNoise(float2(tempZ,tempY));

    itemPerlinData.perlinData = (XY + YZ + XZ + YX + ZY + ZX) / 6;
    BufferPerlinData[dataIndex] = itemPerlinData;
}

